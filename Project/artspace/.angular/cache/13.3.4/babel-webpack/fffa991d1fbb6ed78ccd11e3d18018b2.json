{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AlbumsService = /*#__PURE__*/(() => {\n  class AlbumsService {\n    constructor(client) {\n      this.client = client;\n      this.BASE_URL = 'https://jsonplaceholder.typicode.com';\n      this.BASE_URL1 = 'https://picsum.photos';\n      this.baseUrl = 'http://127.0.0.1:8000/api';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong.\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      } // Return an observable with a user-facing error message.\n\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n    getAlbums() {\n      return this.client.get(`${this.baseUrl}/albums`);\n    }\n\n    getPhotos(id) {\n      return this.client.get(`${this.baseUrl}/albums/${id}/photo`);\n    }\n\n    getPhoto(albumId, id) {\n      return this.client.get(`${this.baseUrl}/albums/${albumId}/photo/${id}/`);\n    }\n\n    deleteAlbum(id) {\n      return this.client.delete(`${this.baseUrl}/albums/${id}`);\n    }\n\n    updateAlbum(album) {\n      return this.client.put(`${this.baseUrl}/albums/${album.id}/`, album);\n    }\n\n    addAlbum(album) {\n      return this.client.post(`${this.baseUrl}/albums/`, album, this.httpOptions).pipe(catchError(this.handleError));\n    }\n\n    addPhoto(albumId, photo) {\n      return this.client.post(`${this.baseUrl}/albums/${albumId}/photo/`, photo, this.httpOptions).pipe(catchError(this.handleError));\n    }\n\n  }\n\n  AlbumsService.ɵfac = function AlbumsService_Factory(t) {\n    return new (t || AlbumsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AlbumsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AlbumsService,\n    factory: AlbumsService.ɵfac,\n    providedIn: 'root'\n  });\n  return AlbumsService;\n})();","map":null,"metadata":{},"sourceType":"module"}